import math

distances = {
    'Alabama': {'Florida': 325, 'Georgia': 150, 'Mississippi': 207, 'Tennessee': 293},
    'Arizona': {'California': 372, 'Colorado': 475, 'Nevada': 408, 'New Mexico': 373, 'Utah': 286},
    'Arkansas': {'Louisiana': 384, 'Mississippi': 276, 'Missouri': 344, 'Oklahoma': 296, 'Tennessee': 382, 'Texas': 418},
    'California': {'Arizona': 372, 'Nevada': 151, 'Oregon': 433},
    'Colorado': {'Arizona': 475, 'Kansas': 438, 'Nebraska': 484, 'New Mexico': 375, 'Oklahoma': 516, 'Utah': 370, 'Wyoming': 110},
    'Connecticut': {'Massachusetts': 96, 'New York': 122, 'Rhode Island': 50},
    'Delaware': {'Maryland': 91, 'New Jersey': 28, 'Pennsylvania': 98},
    'Florida': {'Alabama': 325, 'Georgia': 298},
    'Georgia': {'Alabama': 150, 'Florida': 298, 'North Carolina': 243, 'South Carolina': 214, 'Tennessee': 241},
    'Idaho': {'Montana': 366, 'Nevada': 482, 'Oregon': 342, 'Utah': 280, 'Washington': 423, 'Wyoming': 347},
    'Illinois': {'Indiana': 196, 'Iowa': 210, 'Kentucky': 250, 'Missouri': 293, 'Wisconsin': 305},
    'Indiana': {'Illinois': 196, 'Kentucky': 181, 'Michigan': 250, 'Ohio': 164},
    'Iowa': {'Illinois': 210, 'Minnesota': 249, 'Missouri': 259, 'Nebraska': 153, 'South Dakota': 296, 'Wisconsin': 295},
    'Kansas': {'Colorado': 438, 'Missouri': 270, 'Nebraska': 212, 'Oklahoma': 374},
    'Kentucky': {'Illinois': 250, 'Indiana': 181, 'Missouri': 335, 'Ohio': 147, 'Tennessee': 261, 'Virginia': 322, 'West Virginia': 203},
    'Louisiana': {'Arkansas': 384, 'Mississippi': 123, 'Texas': 384},
    'Maine': {'New Hampshire': 152},
    'Maryland': {'Delaware': 91, 'Pennsylvania': 126, 'Virginia': 179, 'West Virginia': 249},
    'Massachusetts': {'Connecticut': 96, 'New Hampshire': 143, 'New York': 191, 'Rhode Island': 46, 'Vermont': 143},
    'Michigan': {'Indiana': 250, 'Minnesota': 438, 'Ohio': 190, 'Wisconsin': 311},
    'Minnesota': {'Iowa': 249, 'Michigan': 438, 'North Dakota': 383,'South Dakota': 367, 'Wisconsin': 306},
    'Mississippi': {'Alabama': 207, 'Arkansas': 276, 'Louisiana': 123, 'Tennessee': 355},
    'Missouri': {'Arkansas': 344, 'Illinois': 293, 'Iowa': 259, 'Kansas': 270, 'Kentucky': 335, 'Nebraska': 347, 'Oklahoma': 389, 'Tennessee': 332},
    'Montana': {'Idaho': 366, 'North Dakota': 359, 'South Dakota': 466, 'Wyoming': 347},
    'Nebraska': {'Colorado': 484, 'Iowa': 153, 'Kansas': 212, 'Missouri': 347, 'South Dakota': 200, 'Wyoming': 276},
    'Nevada': {'Arizona': 408, 'California': 151, 'Idaho': 482, 'Oregon': 531, 'Utah': 422},
    'New Hampshire': {'Maine': 152, 'Massachusetts': 143, 'Vermont': 115},
    'New Jersey': {'Delaware': 28, 'New York': 130, 'Pennsylvania': 81},
    'New Mexico': {'Arizona': 373, 'Colorado': 375, 'Oklahoma': 615, 'Texas': 420},
    'New York': {'Connecticut': 122, 'Massachusetts': 191, 'New Jersey': 130, 'Pennsylvania': 215, 'Vermont': 305},
    'North Carolina': {'Georgia': 243, 'South Carolina': 177, 'Tennessee': 383, 'Virginia': 329},
    'North Dakota': {'Minnesota': 383, 'Montana': 359, 'South Dakota': 210},
    'Ohio': {'Indiana': 164, 'Kentucky': 147, 'Michigan': 190, 'Pennsylvania': 273, 'West Virginia': 218},
    'Oklahoma': {'Arkansas': 296, 'Colorado': 516, 'Kansas': 374, 'Missouri': 389, 'New Mexico': 615, 'Texas': 346},
    'Oregon': {'California': 433, 'Idaho': 342, 'Nevada': 531, 'Washington': 237},
    'Pennsylvania': {'Delaware': 98, 'Maryland': 126, 'New Jersey': 81, 'New York': 215, 'Ohio': 273, 'West Virginia': 263},
    'Rhode Island': {'Connecticut': 50, 'Massachusetts': 46},
    'South Carolina': {'Georgia': 214, 'North Carolina': 177},
    'South Dakota': {'Iowa': 296, 'Minnesota': 367, 'Montana': 466, 'Nebraska': 200, 'North Dakota': 210, 'Wyoming': 291},
    'Tennessee': {'Alabama': 293, 'Arkansas': 382, 'Georgia': 241, 'Kentucky': 261, 'Mississippi': 355, 'Missouri': 332, 'North Carolina': 383, 'Virginia': 471},
    'Texas': {'Arkansas': 418, 'Louisiana': 384, 'New Mexico': 420, 'Oklahoma': 346},
    'Utah': {'Arizona': 286, 'Colorado': 370, 'Idaho': 280, 'Nevada': 422, 'Wyoming': 291},
    'Vermont': {'Massachusetts': 138, 'New Hampshire': 115, 'New York': 305},
    'Virginia': {'Kentucky': 547, 'Maryland': 120, 'North Carolina': 329, 'Tennessee': 471, 'West Virginia': 315},
    'Washington': {'Idaho': 428, 'Oregon': 237},
    'West Virginia': {'Kentucky': 222, 'Maryland': 174, 'Ohio': 218, 'Pennsylvania': 263, 'Virginia': 315},
    'Wisconsin': {'Illinois': 186, 'Iowa': 210, 'Michigan': 346, 'Minnesota': 250},
    'Wyoming': {'Colorado': 290, 'Idaho': 414, 'Montana': 347, 'Nebraska': 276, 'South Dakota': 291, 'Utah': 389}
}

nodes = ("Alabama", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Idaho",
"Illinois",
"Indiana",
"Iowa",
"Kansas",
"Kentucky",
"Louisiana",
"Maine",
"Maryland",
"Massachusetts",
"Michigan",
"Minnesota",
"Mississippi",
"Missouri",
"Montana",
"Nebraska",
"Nevada",
"New Hampshire",
"New Jersey",
"New Mexico"
"New York",
"North Carolina",
"North Dakota",
"Ohio",
"Oklahoma",
"Oregon",
"Pennsylvania",
"Rhode Island",
"South Carolina",
"South Dakota",
"Tennessee",
"Texas",
"Utah",
"Vermont",
"Virginia",
"Washington",
"West Virginia",
"Wisconsin",
"Wyoming")


def arg_min(T, S):
    amin = -1
    m = max(T)  # максимальное значение
    for i, t in enumerate(T):
        if t < m and i not in S:
            m = t
            amin = i

    return amin

def get_link_v(v, D):
    for i, weight in enumerate(D[v]):
        if weight > 0:
            yield i


'''D = ((0, 3, 1, 3, math.inf, math.inf),
     (3, 0, 4, math.inf, math.inf, math.inf),
     (1, 4, 0, math.inf, 7, 5),
     (3, math.inf, math.inf, 0, math.inf, 2),
     (math.inf, math.inf, 7, math.inf, 0, 4),
     (math.inf, math.inf, 5, 2, 4, 0))'''

D = ((0, 0, 0, 0, 0, 0, 0, 325, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 372, 475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 0, 0, 276, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 382, 418, 0, 0, 0, 0, 0, 0, 0), (0, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 516, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 110), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (325, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (150, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 0, 0, 214, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 482, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 280, 0, 0, 423, 0, 0, 347), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 210, 0, 250, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 181, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 259, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 295, 0), (0, 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 0, 212, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 261, 0, 0, 0, 322, 0, 203, 0, 0), (0, 0, 384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 179, 0, 249, 0, 0), (0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 306, 0), (207, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 344, 0, 0, 0, 0, 0, 0, 0, 293, 0, 259, 270, 335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 0, 466, 0, 0, 0, 0, 0, 0, 0, 0, 347), (0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 153, 212, 0, 0, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 276), (0, 408, 0, 151, 0, 0, 0, 0, 0, 482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 531, 0, 0, 0, 0, 0, 0, 422, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 0, 383, 0, 0, 0, 329, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 0, 0, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 147, 0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0), (0, 0, 296, 0, 516, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 433, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 531, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 0, 0, 0), (0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263, 0, 0), (0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 466, 200, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291), (293, 0, 382, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 261, 0, 0, 0, 0, 0, 0, 355, 332, 0, 0, 0, 0, 0, 0, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 471, 0, 0, 0, 0), (0, 0, 418, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 286, 0, 0, 370, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 547, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 471, 0, 0, 0, 0, 0, 315, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 428, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 210, 0, 0, 0, 0, 0, 0, 346, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 290, 0, 0, 0, 0, 414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291, 0, 0, 389, 0, 0, 0, 0, 0, 0))

#D = ((0, 50, 0, 0, 90), (50, 0, 90, 0, 0), (0, 90, 0, 80, 60), (0, 0, 80, 0, 70),(90, 0, 60, 70, 0))

N = len(D)  # число вершин в графе
T = [math.inf]*N   # последняя строка таблицы

v = 0       # стартовая вершина (нумерация с нуля)
S = {v}     # просмотренные вершины
T[v] = 0    # нулевой вес для стартовой вершины
#M = [0]*N   # оптимальные связи между вершинами

while v != -1:          # цикл, пока не просмотрим все вершины
    for j in get_link_v(v, D):   # перебираем все связанные вершины с вершиной v
        if j not in S:           # если вершина еще не просмотрена
            w = T[v] + D[v][j]
            if w < T[j]:
                T[j] = w

    v = arg_min(T, S)            # выбираем следующий узел с наименьшим весом
    if v > 0:                    # выбрана очередная вершина
        S.add(v)                 # добавляем новую вершину в рассмотрение

print(T)